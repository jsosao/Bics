name: Zapping M3U Converter v3

on:
  schedule:
    - cron: '0 3 * * *'  # Se ejecuta diariamente a medianoche
  workflow_dispatch:  # Permite ejecución manual

jobs:
  convert:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Download and convert M3U file
      run: |
        cd $GITHUB_WORKSPACE
        python3 << 'EOF'
        import urllib.request
        import re
        import os
        import json

        # URL del archivo M3U
        url = "http://tv.zapping.life:8080/get.php?username=mayleenfunez1&password=135535683598&type=m3u_plus"
        
        # Descargar el archivo
        print("Descargando archivo M3U...")
        with urllib.request.urlopen(url) as response:
            content = response.read().decode('utf-8')
        
        # Obtener lista de logos disponibles en el repositorio
        print("Obteniendo lista de logos disponibles...")
        github_api_url = "https://api.github.com/repos/jsosao/Bics/contents/picons"
        
        try:
            with urllib.request.urlopen(github_api_url) as response:
                picons_data = json.loads(response.read().decode('utf-8'))
                available_logos = {item['name'].lower(): item['download_url'] 
                                 for item in picons_data if item['type'] == 'file'}
            print(f"Se encontraron {len(available_logos)} logos disponibles")
        except Exception as e:
            print(f"Error al obtener logos: {e}")
            available_logos = {}
        
        # Logo por defecto
        default_logo = "https://raw.githubusercontent.com/jsosao/Bics/main/picons/no_logo.png"
        
        # Función para encontrar el logo más apropiado
        def find_best_logo(title):
            if not available_logos:
                return default_logo
            
            # Limpiar el título para búsqueda
            title_clean = title.lower()
            # Remover prefijos de país
            title_clean = re.sub(r'^(au|uk|us|ca|es|mx|ar|br|fr)[\s:-]*', '', title_clean)
            # Remover caracteres especiales y espacios extras
            title_clean = re.sub(r'[^\w\s]', '', title_clean).strip()
            
            # Búsqueda exacta (título completo)
            for logo_name in available_logos:
                logo_base = logo_name.replace('.png', '').replace('.jpg', '').replace('.jpeg', '')
                if title_clean == logo_base:
                    print(f"  Logo encontrado (exacto): {logo_name}")
                    return available_logos[logo_name]
            
            # Búsqueda por palabras clave principales
            words = title_clean.split()
            if words:
                main_word = words[0]  # Primera palabra principal
                for logo_name in available_logos:
                    logo_base = logo_name.replace('.png', '').replace('.jpg', '').replace('.jpeg', '')
                    if main_word in logo_base or logo_base in main_word:
                        print(f"  Logo encontrado (parcial): {logo_name}")
                        return available_logos[logo_name]
            
            # Búsqueda flexible (contiene alguna palabra)
            for word in words:
                if len(word) > 3:  # Solo palabras significativas
                    for logo_name in available_logos:
                        logo_base = logo_name.replace('.png', '').replace('.jpg', '').replace('.jpeg', '')
                        if word in logo_base:
                            print(f"  Logo encontrado (keyword): {logo_name}")
                            return available_logos[logo_name]
            
            print(f"  Logo no encontrado, usando default")
            return default_logo
        
        # Función para determinar el país basado en el título
        def get_country(title):
            title_upper = title.upper()
            if title.startswith("AU"):
                return "au"
            elif title.startswith("UK") or "BBC" in title_upper:
                return "uk"
            elif title.startswith("US"):
                return "us"
            elif title.startswith("CA"):
                return "ca"
            elif title.startswith("ES"):
                return "es"
            elif title.startswith("MX"):
                return "mx"
            elif title.startswith("AR"):
                return "ar"
            elif title.startswith("BR"):
                return "br"
            elif title.startswith("FR"):
                return "fr"
            else:
                return "us"  # Default
        
        # Función para determinar el tag basado en el group-title
        def get_tag(group_title):
            group_lower = group_title.lower()
            if "sport" in group_lower:
                return "Sports"
            elif "radio" in group_lower:
                return "Radio"
            elif "news" in group_lower:
                return "News"
            elif "movie" in group_lower or "film" in group_lower or "peliculas" in group_lower:
                return "Movies"
            elif "series" in group_lower or "tv show" in group_lower:
                return "Series"
            elif "music" in group_lower:
                return "Music"
            else:
                return "General"
        
        # Función para verificar si el grupo debe ser incluido
        def should_include_group(group_title):
            group_lower = group_title.lower()
            # Solo incluir grupos que contengan estas palabras clave
            include_keywords = ["canales", "canales de peliculas"]
            return any(keyword in group_lower for keyword in include_keywords)
        
        # Función para escapar la URL
        def escape_url(url):
            url = url.replace("http://", "http[:[/][/]]")
            url = url.replace("https://", "https[:[/][/]]")
            url = url.replace(".", "[.]")
            url = url.replace("/", "[/]")
            return url
        
        # Parsear el archivo M3U
        lines = content.strip().split('\n')
        entries = []
        skipped_count = 0
        
        i = 0
        while i < len(lines):
            line = lines[i].strip()
            
            if line.startswith('#EXTINF:'):
                # Extraer información de la línea EXTINF
                tvg_name_match = re.search(r'tvg-name="([^"]*)"', line)
                tvg_logo_match = re.search(r'tvg-logo="([^"]*)"', line)
                group_title_match = re.search(r'group-title="([^"]*)"', line)
                
                # El título está al final de la línea después de la última coma
                title_match = re.search(r',(.*)$', line)
                
                tvg_name = tvg_name_match.group(1) if tvg_name_match else ""
                tvg_logo = tvg_logo_match.group(1) if tvg_logo_match else ""
                group_title = group_title_match.group(1) if group_title_match else ""
                title = title_match.group(1).strip() if title_match else tvg_name
                
                # La siguiente línea debe ser la URL del stream
                i += 1
                if i < len(lines):
                    stream_url = lines[i].strip()
                    
                    # Solo incluir grupos que cumplan con los criterios
                    if not should_include_group(group_title):
                        print(f"Omitiendo: '{title}' | Grupo: '{group_title}' -> NO cumple criterios")
                        skipped_count += 1
                        i += 1
                        continue
                    
                    print(f"Procesando: '{title}' | Grupo: '{group_title}'")
                    
                    # Buscar el logo más apropiado
                    best_logo = find_best_logo(title)
                    
                    # Crear la entrada
                    entry = {
                        'Artist': 'Zapping',
                        'Title': title,
                        'streamFormat': 'hls|mts',
                        'SwitchingStrategy': 'full-adaptation',
                        'Logo': best_logo,
                        'Stream': escape_url(stream_url),
                        'Live': True,
                        'Country': get_country(title),
                        'Tag': get_tag(group_title)
                    }
                    entries.append(entry)
            
            i += 1
        
        # Generar el archivo de salida
        output_lines = []
        for entry in entries:
            output_lines.append('{')
            output_lines.append(f'    Artist: "{entry["Artist"]}"')
            output_lines.append(f'    Title: "{entry["Title"]}"')
            output_lines.append(f'    streamFormat: "{entry["streamFormat"]}"')
            output_lines.append(f'    SwitchingStrategy: "{entry["SwitchingStrategy"]}"')
            output_lines.append(f'    Logo: "{entry["Logo"]}"')
            output_lines.append(f'    Stream: "{entry["Stream"]}"')
            output_lines.append(f'    Live: {str(entry["Live"]).lower()}')
            output_lines.append(f'    Country: "{entry["Country"]}"')
            output_lines.append(f'    Tag: "{entry["Tag"]}"')
            output_lines.append('}')
        
        output_content = '\n'.join(output_lines)
        
        # Guardar el archivo sin extensión
        output_path = "country/others/zapping"
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(output_content)
        
        print(f"\n{'='*60}")
        print(f"Archivo guardado exitosamente en {output_path}")
        print(f"Total de entradas incluidas: {len(entries)}")
        print(f"Total de entradas omitidas: {skipped_count}")
        
        # Estadísticas de logos
        logos_default = sum(1 for e in entries if e['Logo'] == default_logo)
        logos_found = len(entries) - logos_default
        print(f"Logos encontrados: {logos_found}")
        print(f"Logos default: {logos_default}")
        print(f"{'='*60}")
        EOF
        
    - name: Commit and push changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add country/others/zapping
        git diff --staged --quiet || git commit -m "Update zapping - $(date +'%Y-%m-%d %H:%M:%S')"
        git push
