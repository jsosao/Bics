name: Converter Zapping M3U

on:
  schedule:
    - cron: '30 6 * * 4,5'  # Se ejecuta los jueves y viernes a las 6:30 AM UTC
  workflow_dispatch:  # Permite ejecución manual

jobs:
  convert:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Download and convert M3U file
      env:
        M3U_URL: ${{ secrets.ZAPPING_M3U_URL }}
      run: |
        cd $GITHUB_WORKSPACE
        python3 << 'EOF'
        import urllib.request
        import re
        import os

        # URL del archivo M3U desde variable de entorno (GitHub Secret)
        url = os.environ.get('M3U_URL')
        if not url:
            print("❌ ERROR: No se encontró la variable M3U_URL")
            print("Verifica que el secret ZAPPING_M3U_URL esté configurado en GitHub")
            exit(1)
        
        print(f"✓ URL cargada desde secret ZAPPING_M3U_URL correctamente")
        
        # Descargar el archivo
        print("\nDescargando archivo M3U...")
        try:
            with urllib.request.urlopen(url) as response:
                content = response.read().decode('utf-8')
            print("✓ Archivo M3U descargado exitosamente")
        except Exception as e:
            print(f"❌ Error al descargar el archivo M3U: {e}")
            exit(1)
        
        # Logo por defecto
        default_logo = "https://raw.githubusercontent.com/jsosao/Bics/main/picons/no_logo.png"

        # ============================================================
        # FUNCIONES AUXILIARES
        # ============================================================
        
        def clean_title(title):
            """Limpia el título de prefijos no deseados."""
            # Eliminar prefijos específicos
            prefixes_to_remove = ["CINE - ", "DEPORTES - ", "CINE -", "DEPORTES -","DOC-", "NOV-", "MUS-", "INF-"]
            for prefix in prefixes_to_remove:
                if prefix in title:
                    title = title.replace(prefix, "").strip()
            
            # Eliminar todo lo que esté dentro de paréntesis
            title = re.sub(r'\([^)]*\)', '', title)
            
            # Limpiar espacios múltiples
            title = re.sub(r'\s+', ' ', title).strip()
            
            return title
        
        def get_country(title):
            """Determina el país basado en el título."""
            title_upper = title.upper()
            if title.startswith("AU") or "AUSTRALIA" in title_upper:
                return "au"
            elif title.startswith("UK") or "BBC" in title_upper or "BRITAIN" in title_upper:
                return "uk"
            elif title.startswith("US") or "USA" in title_upper:
                return "us"
            elif title.startswith("CA") or "CANADA" in title_upper:
                return "ca"
            elif title.startswith("ES") or "SPAIN" in title_upper or "ESPAÑA" in title_upper:
                return "es"
            elif title.startswith("MX") or "MEXICO" in title_upper or "MÉXICO" in title_upper:
                return "mx"
            elif title.startswith("AR") or "ARGENTINA" in title_upper:
                return "ar"
            elif title.startswith("BR") or "BRASIL" in title_upper or "BRAZIL" in title_upper:
                return "br"
            elif title.startswith("FR") or "FRANCE" in title_upper or "FRANCIA" in title_upper:
                return "fr"
            else:
                return "us"  # Default
        
        def get_tag(group_title):
            """Determina el tag basado en el group-title."""
            group_lower = group_title.lower()
            if "sport" in group_lower or "deporte" in group_lower:
                return "Sports"
            elif "radio" in group_lower:
                return "Radio"
            elif "news" in group_lower or "noticias" in group_lower:
                return "News"
            elif "movie" in group_lower or "film" in group_lower or "peliculas" in group_lower or "cine" in group_lower:
                return "Movies"
            elif "series" in group_lower or "tv show" in group_lower:
                return "Series"
            elif "music" in group_lower or "musica" in group_lower:
                return "Music"
            elif "doc" in group_lower:
                return "Documentary"
            elif "kids" in group_lower or "infantil" in group_lower:
                return "Kids"
            else:
                return "General"
        
        def should_skip_group(group_title):
            """Verifica si el grupo debe ser omitido."""
            group_lower = group_title.lower()

            # Palabras clave que indican grupos a omitir
            skip_keywords = ["canales-adultos", "adultos", "adult","vod", "series"]
            if any(keyword in group_lower for keyword in skip_keywords):
                return False
        
        def escape_url(url):
            """Escapa la URL para el formato de salida."""
            url = url.replace("http://", "http[:[/][/]]")
            url = url.replace("https://", "https[:[/][/]]")
            url = url.replace(".", "[.]")
            url = url.replace("/", "[/]")
            return url

        # ============================================================
        # PROCESAMIENTO PRINCIPAL
        # ============================================================
        
        print("\n" + "="*60)
        print("PROCESANDO CANALES - CORD")
        print("="*60)
        
        lines = content.strip().split('\n')
        entries = []
        skipped_count = 0
        logos_with_value = 0
        logos_default = 0
        
        i = 0
        while i < len(lines):
            line = lines[i].strip()
            
            if line.startswith('#EXTINF:'):
                # Extraer información de la línea EXTINF
                tvg_name_match = re.search(r'tvg-name="([^"]*)"', line)
                tvg_logo_match = re.search(r'tvg-logo="([^"]*)"', line)
                group_title_match = re.search(r'group-title="([^"]*)"', line)
                
                # El título está al final de la línea después de la última coma
                title_match = re.search(r',(.*)$', line)
                
                tvg_name = tvg_name_match.group(1) if tvg_name_match else ""
                tvg_logo = tvg_logo_match.group(1) if tvg_logo_match else ""
                group_title = group_title_match.group(1) if group_title_match else ""
                title = title_match.group(1).strip() if title_match else tvg_name

                # Limpiar el título de prefijos no deseados
                title = clean_title(title)
                
                # La siguiente línea debe ser la URL del stream
                i += 1
                if i < len(lines):
                    stream_url = lines[i].strip()
                    
                    # Omitir grupos especificados
                    if should_skip_group(group_title):
                        print(f"⊗ Omitiendo: '{title}' | Grupo: '{group_title}'")
                        skipped_count += 1
                        i += 1
                        continue
                    
                    # Determinar el logo a usar
                    if tvg_logo and tvg_logo.strip():
                        final_logo = tvg_logo
                        logos_with_value += 1
                        print(f"✓ Procesando: '{title}' | Logo: {tvg_logo}")
                    else:
                        final_logo = default_logo
                        logos_default += 1
                        print(f"⚠ Procesando: '{title}' | Logo: no_logo.png (sin tvg-logo)")
                    
                    # Crear la entrada
                    entry = {
                        'Artist': 'Cord',
                        'Title': title,
                        'streamFormat': 'hls|mts',
                        'SwitchingStrategy': 'full-adaptation',
                        'Logo': final_logo,
                        'Stream': escape_url(stream_url),
                        'Live': True,
                        'Country': get_country(title),
                        'Tag': get_tag(group_title)
                    }
                    entries.append(entry)
            
            i += 1
        
        # Generar el archivo de salida
        output_lines = []
        for entry in entries:
            output_lines.append('{')
            output_lines.append(f'    Artist: "{entry["Artist"]}"')
            output_lines.append(f'    Title: "{entry["Title"]}"')
            output_lines.append(f'    streamFormat: "{entry["streamFormat"]}"')
            output_lines.append(f'    SwitchingStrategy: "{entry["SwitchingStrategy"]}"')
            output_lines.append(f'    Logo: "{entry["Logo"]}"')
            output_lines.append(f'    Stream: "{entry["Stream"]}"')
            output_lines.append(f'    Live: {str(entry["Live"]).lower()}')
            output_lines.append(f'    Country: "{entry["Country"]}"')
            output_lines.append(f'    Tag: "{entry["Tag"]}"')
            output_lines.append('}')
        
        output_content = '\n'.join(output_lines)
        
        # Guardar el archivo sin extensión
        output_path = "country/others/zapping"
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(output_content)
        
        # Estadísticas finales
        print("\n" + "="*60)
        print("RESUMEN FINAL - ZAPPING")
        print("="*60)
        print(f"✓ Archivo guardado en: {output_path}")
        print(f"✓ Total de canales procesados: {len(entries)}")
        print(f"⊗ Total de canales omitidos: {skipped_count}")
        print(f"✓ Logos del archivo original: {logos_with_value} ({logos_with_value*100//len(entries) if entries else 0}%)")
        print(f"⚠ Logos default (no_logo.png): {logos_default} ({logos_default*100//len(entries) if entries else 0}%)")
        print("="*60)
        EOF
        
    - name: Commit and push changes
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add country/others/zapping
        git diff --staged --quiet || git commit -m "Update zapping - $(date +'%Y-%m-%d %H:%M:%S')"
        git push  
