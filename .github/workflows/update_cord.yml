name: Process M3U to Cord.txt

on:
  schedule:
    - cron: '0 */6 * * *'  # Ejecuta cada 6 horas
  workflow_dispatch:  # Permite ejecución manual

jobs:
  process-m3u:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
          
      - name: Download and process M3U
        run: |
          python << 'EOF'
          import urllib.request
          import urllib.error
          import re
          
          # URLs
          M3U_URL = "http://cord-cutter.net:8080/get.php?username=19174796&password=19174796&type=m3u_plus"
          PICONS_BASE = "https://raw.githubusercontent.com/jsosao/Bics/main/picons/"
          NO_LOGO = "https://raw.githubusercontent.com/jsosao/Bics/main/picons/no_logo.png"
          
          # Grupos a excluir
          EXCLUDED_GROUPS = ["Radio Stations", "Movies", "Series"]
          
          # Mapeo de categorías a tags
          TAG_MAPPING = {
              "sports": "Sports",
              "sport": "Sports",
              "news": "News",
              "kids": "Kids",
              "entertainment": "Entertainment",
              "documentary": "Documentary",
              "music": "Music"
          }
          
          def get_country_code(title):
              """Extrae el código de país del título"""
              match = re.match(r'^([A-Z]{2}):', title)
              if match:
                  return match.group(1).lower()
              return "us"
          
          def get_tag(group_title, title):
              """Determina el tag basado en el grupo o título"""
              text = (group_title + " " + title).lower()
              for keyword, tag in TAG_MAPPING.items():
                  if keyword in text:
                      return tag
              return "General"
          
          def sanitize_title_for_filename(title):
              """Convierte el título en un nombre de archivo válido"""
              # Eliminar prefijo de país (ej: "PT: ")
              title = re.sub(r'^[A-Z]{2}:\s*', '', title)
              # Convertir a minúsculas y reemplazar espacios
              title = title.lower()
              title = re.sub(r'\s+', '_', title)
              # Eliminar caracteres especiales
              title = re.sub(r'[^a-z0-9_]', '', title)
              return title
          
          def check_picon_exists(filename):
              """Verifica si existe el picon en GitHub"""
              url = PICONS_BASE + filename
              try:
                  req = urllib.request.Request(url, method='HEAD')
                  with urllib.request.urlopen(req, timeout=5) as response:
                      return response.status == 200
              except:
                  return False
          
          def get_logo_url(title, tvg_logo):
              """Obtiene la URL del logo, buscando en picons si es necesario"""
              # Si ya tiene un logo válido de picons, usarlo
              if tvg_logo and PICONS_BASE in tvg_logo:
                  return tvg_logo
              
              # Generar nombre de archivo basado en el título
              clean_title = sanitize_title_for_filename(title)
              potential_filename = f"{clean_title}.png"
              
              # Verificar si existe el picon
              if check_picon_exists(potential_filename):
                  return PICONS_BASE + potential_filename
              
              return NO_LOGO
          
          def escape_stream_url(url):
              """Escapa la URL según el formato requerido"""
              url = url.replace("http://", "http[:[/][/]]")
              url = url.replace(".", "[.]")
              url = url.replace("/", "[/]")
              return url
          
          # Descargar el archivo M3U
          print("Descargando archivo M3U...")
          try:
              with urllib.request.urlopen(M3U_URL, timeout=30) as response:
                  m3u_content = response.read().decode('utf-8')
          except urllib.error.URLError as e:
              print(f"Error al descargar: {e}")
              exit(1)
          
          # Procesar el contenido
          print("Procesando entradas...")
          entries = []
          lines = m3u_content.split('\n')
          
          i = 0
          while i < len(lines):
              line = lines[i].strip()
              
              if line.startswith('#EXTINF:'):
                  # Extraer información del EXTINF
                  tvg_name_match = re.search(r'tvg-name="([^"]*)"', line)
                  tvg_logo_match = re.search(r'tvg-logo="([^"]*)"', line)
                  group_title_match = re.search(r'group-title="([^"]*)"', line)
                  
                  if tvg_name_match and group_title_match:
                      title = tvg_name_match.group(1).strip()
                      tvg_logo = tvg_logo_match.group(1) if tvg_logo_match else ""
                      group_title = group_title_match.group(1).strip()
                      
                      # Verificar si el grupo está excluido
                      if group_title not in EXCLUDED_GROUPS:
                          # Obtener la URL del stream (siguiente línea)
                          i += 1
                          if i < len(lines):
                              stream_url = lines[i].strip()
                              
                              if stream_url.startswith('http'):
                                  # Obtener país y tag
                                  country = get_country_code(title)
                                  tag = get_tag(group_title, title)
                                  
                                  # Obtener logo
                                  logo = get_logo_url(title, tvg_logo)
                                  
                                  # Escapar URL
                                  escaped_stream = escape_stream_url(stream_url)
                                  
                                  # Crear entrada
                                  entry = f'''{{
              Artist: "Cord"
              Title: "{title}"
              streamFormat: "hls|mts"
              SwitchingStrategy: "full-adaptation"
              Logo: "{logo}"
              Stream: "{escaped_stream}"
              Live: true
              Country: "{country}"
              Tag: "{tag}"
          }}'''
                                  entries.append(entry)
              
              i += 1
          
          # Guardar el archivo
          print(f"Guardando {len(entries)} entradas en Cord.txt...")
          with open('Cord.txt', 'w', encoding='utf-8') as f:
              f.write('\n'.join(entries))
          
          print("Proceso completado exitosamente!")
          EOF
          
      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add Cord.txt
          git diff --staged --quiet || git commit -m "Update Cord.txt - $(date +'%Y-%m-%d %H:%M:%S')"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
